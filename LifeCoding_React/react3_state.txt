어떤 제품이 있음
	-> 이건 사용자의 입장과 개발자의 입장으로 나뉘어짐
	-> user interface (사용자가 버튼을 누르거나 그런거~)
	-> props는 사용자가 저 장치를 조작하는 user interface라고 생각하면됨 ( 사용자가 component를 사용하는 입장에서 중요한 것!)
	-> 개발자는 내부적 메카니즘과 같은 걸 사용하는 데 사용되어지는 거가 state라고함! (props의 값에 따라 내부를 구성하는데 사용되어지는 것!)
	props에 따라 component를 내부를 실제로 구성하는 state!
state

props를 쓰기 위해선 이런 코드가 필요하다!
constructor(props){
	super(props);
}
state값을 초기화 -> 초기의 값으로 기존에 들어갔던 값을 세팅! 어떤 컴퍼넌트가 실행될때 render라는 함수보다 먼저 실핼되면서 그 component에 초기화해주고 싶은 값은 constructor를 짜고 그안에다가 넣으면 됨!
	-> 즉 constructor라는 함수가 있다면 얘가 제일 먼저 실행되서 초기화를 담당한다! 라고 생각하면됨!

react는 props값이나 state값이 바뀌면 그 state를 가지고 있는 component의 render함수가 다시 호출되어짐! -> 그 render함수가 다시 호출됨에 따라서 그 render함수 하위에 있는 component들도 render함수가 있는데, 걔들도 싹다 호출되어짐 -> 화면이 다시 그려지게 되는 것임! render함수가 하는 일은 어떤 html을 결정하는 함수이기 때문!

react에선 onClick임! 기존 javascript에선 onclick이었음!

a tag는 기본적으로 href라는 곳으로 새로이동한다는 개념이 있음!

코드에 debugger를 넣어놓으면 브라우저가 실행되다가 debugger코드가 있는곳에서 멈추고 개발자도구에서 sources에서 여러 정보를 볼 수 있게됨!


event가 실행될떄 (함수 호출된다거나 그럴때) 함수의 첫번째 파라미터(매개변수)의 값으로 event라는 객체를 주입해주기로 약속되어 있음! 얘가 e임
e.preventDefault();
	event가 발생한 tag의 기본적인 동작방법을 막는 방법!
html의 태그들에서 이벤트를 걸떄 그 태그가 갖고 있는 기본적인 동작방법을 못하게 해야될때 사용하는 명령!

event가 실행됬을때 실행되는 함수 안에있는 this의 값은 아무것도 가리키지 않음
	-> 따라서 함수가 끝난 직후에 .bind(this)를 추가해줘야함!
		==> 이렇게만 짜면 코드가 안바뀜 -> 이렇게하면 react는 바뀐줄 모름 -> 따라서 this.setState();를 호출하면됨! 여기 변경하고픈 인자값을 넣으면됨!

bind함수! bind는 엮는다, 묶어준다 라는 뜻임!
기본적으로 render라는 함수가 실행되어질때, render라는 함수 안에서 this는 그 component 자신을 가리킴 -> 근데 이 안에있는 함수에서 this가 안불러짐 -> 이걸 위해선 .bind(this)룰 붙여야함!
bind함수로 인해 인자로 들어가는 것의 this의 this를 쓸 수 있어지게됨 / 이해안가면 그냥 써...

component가 생성된 뒤에, 값을 동적으로 바꾸려면 setState이런식으로 바꿔야함!! 이런식으로!
	-> 그 이유는 react입장에선 그냥 값을 바꿔버리면 react입장에선 react모르게 바꾼셈임 -> 이러면 rendering이 안되는거~ 그래서 함수써서 그 안에다가 바꾸고 싶은데로 바꿔라~~

event만드는건 props로 이벤트전송하고 그 안에서 props에 있던 함수 호출함! -> 즉 props안에 미리 작성하고 싶은 함수내용만들어서 이벤트를 수행하면된다~!?

event객체는 event가 발생한 tag를 가리킴
따라서 event함수 내에서 e.target 을 쓰면 알 수 있음

bind함수 this뒤에 두번째 인자를 주게되면 bind함수가 붙어있는 함수의 첫번째 인자로 두번쨰 인자 값을 받아서 전달해줌!