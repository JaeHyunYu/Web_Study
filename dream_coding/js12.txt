promise
	javascript에서 제공하는 비동기를 간편하게 처리할 수 있도록 하는 오브젝트!
	정상적으로 기능이 수행되면 잘되었다고 알려주고 에러뜨면 에러알려줌!

process의 상태, producer(정보를제공하는)와 consume(정보를 사용하는)의 차이를 잘 이해하면서 공부하면됨!

operation을 진행중일때 state는 pending상태가 되고 완료하면 fulfilled, 실패하면 rejected상태가 되어짐!


Producer!(정보를 제공하는!)

const promise = new Promise((resolve,reject)=>{
			doing some heavy work() // 시간이 좀걸리는 애들은 async식(비동기식)으로 처리하는 거가 좋음 // 동기식으로 하면 다음코드가 실행이 안되기 때문에!
		}); // 식으로해서 선언할 수 있음!

새로운 promise가 실행될때는 우리가 생성한 executor함수가 자동적으로 실행되어짐을 잊지 않고 짜야함! ( 불필요한 네트워크 작업이나 그런 일이 발생할 수 있으므로 정신차려야함 )


Consumer(정보를 사용하는 // then,catch, finally등을 이용하여 값을 받아올 수 있음)

promise.then((value)=>{
	console.log(value);
});

	=> then이라는 함수는 콜백함수가 잘 실행이 되어서 넘겨준 값을 잘 출력해주는! 그런 친구!


promise.catch(error=>{
	console.log(error);
});
	=> reject되었을때 출력해주는 consumer!


최근의 추가되어진 finally!
	=> 성공하든 실패하든 마지막에 실행하게 되는 친구임!

promise.finally(()=>{
	console.log('finally');
} // 이런식으로 쓰면됨!


Promise chaining!

const fetchNumber = new Promise((resolve,reject)=>{
	setTimeout(()=>resolve(1,1000);
});

fetchNumber
	.then(num => num*2)
	.then(num => num*3)
	.then(num=>{
		return new Promise((resolve,reject)=>{
		setTimeoit(()=>resolve(num-1),1000);
	});
	})
	.then(num=>console.log(num));

	=>여러 비동기적인 애들을 묶어서 할 수도 잇음!