HTTP
	서버와 클라이언트가 어떻게 통신할지에 관한 규약! request -> response <- !!

http를 이용해서 서버에 요청하고 받아올 수 있는것!
으로는 AJAX가 있음 ( Asynchronous JavaScript And Xml )
	웹페이지에서 동적으로 서버에게 정보를 주고받을 수 있는!
	XHR이라는 오브젝트가 있음
		-> 간단하게 서버에게 데이터를 요청하고 받아올 수 있음!
		-> fetch() API 사용해도 괜춘!!
		-> XMXLHttpRequest라는 오브젝트를 사용해도 괜춘!
		-> XML은 불필요한 태그들이 너무 들어가서 파일크기도 커지고 가독성도 너무 안좋아서 많이 안쓰여짐
			-> JSON!!사용!

JSON ( JavaScript Object Notation )
	key와 value로 이루어져 있음!

JSON은 브라우저 뿐아니라 모바일 , 오브젝트를 파일시스템에 저장할때도 주로 사용되어짐!
	텍스트를기반으로 가볍고, 데이터를 간단하게 주고받는 포멧! 데이터를 직렬화, 전송할때 사용!, 프로그램언어와 플랫폼에 상관없이 쓸 수 있음!!

JSON / 데이터를 직렬화, 어떻게 deserialize해서 사용할 건지! 알아가면됨!

json.js

1. obejct to json
	JSON.stringify(obj)
		let json = JSON.stringify(true);
		이렇게하면 true json!

	json = JSON.stringify(['hi','hi2']);
		json규격으로 배열 들어가짐!
	
	함수,symbol같은 것도 json엔 안들어가짐!

	json으로 변환할때 콜백함수를 이용해서 더 통제할 수도 있음!
	배열에 오브젝트의 이름만 넣어서 원하는 값만 json으로 변환할 수도 잇음!

2. json to object
	JSON.parse(obj)
	
	const obj = JSON.parse(json);
		=> 이러면 오브젝트로 돌아가짐!
	json은 string type이기 때문에 다시 obj로 바뀐 데이터들은 모두 string형태라는 것을 알아야함! 

JSON 유용한 사이트 // 

JSON Validator ==> 문제를 디버깅할때 잘 쓸 수 있음

JSON Beautifier ==> 가끔 서버에서 받아온 Json을 보면 포멧이 맛탱이가있을 수 있음 -> 이때 포멧을 이쁘게 만들 수 있는 웹사이트

JSON Parser ==> JSON으로부터 오브젝트가 어떻게 표기되어지는지 잘 확인할 수 있음!

JSON Validateor ==> 유효한 json데이터인지, 아닌지 확인할 수 있음!